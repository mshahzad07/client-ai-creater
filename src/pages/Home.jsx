import React, { useEffect, useState } from 'react';

import { Card, Footer, FormField, Loader } from '../components';
import ReactModal from 'react-modal';

const RenderCards = ({ data, title }) => {
  if (data?.length > 0) {
    return (
      data.map((post) => <Card key={post._id} {...post} />)
    );
  }

  return (
    <h2 className="mt-5 font-bold text-[#6469ff] text-xl uppercase">{title}</h2>
  );
};

const Home = () => {
  const [loading, setLoading] = useState(false);
  const [allPosts, setAllPosts] = useState(null);

  const [searchText, setSearchText] = useState('');
  const [searchTimeout, setSearchTimeout] = useState(null);
  const [searchedResults, setSearchedResults] = useState(null);
  const [isDeleteModalOpen, setDeleteModalOpen] = useState(false);


  const openDeletedPopup = () => {
    setDeleteModalOpen(true);
  };

  const closeDeletedPopup = () => {
    setDeleteModalOpen(false);
  };

  // const [posts, setPosts] = useState([...all]); // Initial list of posts




  const fetchPosts = async () => {
    setLoading(true);

    try {
      const response = await fetch('http://localhost:8080/api/v1/post', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        const result = await response.json();
        setAllPosts(result.data.reverse());
      }
    } catch (err) {
      alert(err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchPosts();
  }, []);

  const handleSearchChange = (e) => {
    clearTimeout(searchTimeout);
    setSearchText(e.target.value);

    setSearchTimeout(
      setTimeout(() => {
        const searchResult = allPosts.filter((item) => item.name.toLowerCase().includes(searchText.toLowerCase()) || item.prompt.toLowerCase().includes(searchText.toLowerCase()));
        setSearchedResults(searchResult);
      }, 500),
    );
  };

  // export function handleDeleteSuccess(deletedId) {
  //   setPosts(posts.filter((allPosts) => allPosts._id !== deletedId));

  // }
  const handleDeleteSuccess = (deletedId) => {
    setAllPosts(allPosts.filter((post) => post._id !== deletedId));
    setDeleteModalOpen(true);
  };

  return (
    <section className="max-w-7xl mx-auto">

      <div>
        <h1 className="font-extrabold text-[white] text-[32px]">FROST TREK SHOWCASE</h1>
        <p className="mt-4  text-[white] max-w-[auto] mx-auto">Browse through a collection of imaginative and visually stunning images generated by Artificial Intelligence</p>
      </div>

      <div className="mt-16 mb-6">
        <FormField
          labelName="Search posts"
          type="text"
          name="text"
          placeholder="Search something..."
          value={searchText}
          handleChange={handleSearchChange}
        />
      </div>
      <div className="mt-10">
        {loading ? (
          <div className="flex justify-center items-center">
            <Loader />
          </div>
        ) : (
          <>
            {searchText && (
              <h2 className="font-medium text-[#666e75] text-xl mb-7">
                Showing Results for <span className="text-[#a3a115]">{searchText}</span> :
              </h2>
            )}
            <div className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3">
              {searchText ? (
                <RenderCards
                  data={searchedResults}
                  title="No Search Results Found"
                />
              ) : (
                <>
                  {allPosts ? (
                    allPosts.map((post) => (
                      <Card
                        key={post._id}
                        _id={post._id}
                        name={post.name}
                        prompt={post.prompt}
                        photo={post.photo}
                        handleDeleteSuccess={handleDeleteSuccess}
                      />
                    ))
                  ) : (
                    <RenderCards data={[]} title="No Posts Yet" />
                  )}
                </>
              )}
            </div>
          </>
        )
        }
<div>
            {isDeleteModalOpen && (
              <ReactModal
                isOpen={isDeleteModalOpen}
                onRequestClose={closeDeletedPopup}
                contentLabel="Popup"
                className="modal fixed inset-0 flex items-center justify-center"
                overlayClassName="modal-overlay fixed inset-0 bg-black bg-opacity-50"
              >
                <div className="modal-content bg-white bg-opacity-100 p-8 rounded-lg shadow-lg max-w-md mx-auto">
                  <p className="font-inter font-medium my-8">
                    The image has been deleted.
                  </p>
                  <div className="flex justify-end mt-4">
                    <button
                      onClick={closeDeletedPopup}
                      className="font-inter font-medium bg-[#BD8B44] text-white px-4 py-2 mx-2 rounded-md"
                    >
                      OK
                    </button>
                  </div>
                </div>
              </ReactModal>
            )}
            </div>
      </div>

      <Footer />

    </section>
  );
};

export default Home;